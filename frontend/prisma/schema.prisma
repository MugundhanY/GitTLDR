generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(cuid())
  email             String        @unique
  name              String
  avatarUrl         String?       @map("avatar_url")
  githubId          String        @unique @map("github_id")
  githubLogin       String?       @map("github_login")
  bio               String?
  location          String?
  company           String?
  blog              String?
  twitterUsername   String?       @map("twitter_username")
  publicRepos       Int?          @map("public_repos")
  publicGists       Int?          @map("public_gists")
  followers         Int?
  following         Int?
  hireable          Boolean?
  githubCreatedAt   DateTime?     @map("github_created_at")
  credits           Int           @default(150)
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  githubAccessToken String?       @map("github_access_token")
  meetings          Meeting[]
  questions         Question[]
  repositories      Repository[]
  transactions      Transaction[]

  @@map("users")
}

model Repository {
  id              String           @id @default(cuid())
  name            String
  fullName        String           @map("full_name")
  owner           String
  url             String
  description     String?
  language        String?
  stars           Int              @default(0)
  forks           Int              @default(0)
  isPrivate       Boolean          @default(false) @map("is_private")
  processed       Boolean          @default(false)
  summary         String?
  embeddingStatus RepositoryStatus @default(PENDING) @map("embedding_status")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  userId          String           @map("user_id")
  avatarUrl       String?          @map("avatar_url")
  fileCount       Int?             @map("file_count")
  totalSize       Int?             @map("total_size")
  watchersCount   Int?             @map("watchers_count")
  commits         Commit[]
  questions       Question[]
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  files           RepositoryFile[]

  @@map("repositories")
}

model RepositoryFile {
  id           String     @id @default(cuid())
  path         String
  name         String
  type         String
  size         Int
  summary      String?
  language     String?
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  repositoryId String     @map("repository_id")
  fileKey      String?    @map("file_key")
  fileUrl      String?    @map("file_url")
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@unique([repositoryId, path])
  @@map("repository_files")
}

model Commit {
  id           String           @id @default(cuid())
  sha          String           @unique
  message      String
  authorName   String           @map("author_name")
  authorEmail  String           @map("author_email")
  authorAvatar String?          @map("author_avatar")
  timestamp    DateTime
  url          String
  summary      String?
  filesChanged Int              @map("files_changed")
  createdAt    DateTime         @default(now()) @map("created_at")
  repositoryId String           @map("repository_id")
  status       RepositoryStatus @default(PENDING)
  repository   Repository       @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("commits")
}

model Question {
  id              String     @id @default(cuid())
  query           String
  answer          String
  confidenceScore Float      @map("confidence_score")
  relevantFiles   Json       @map("relevant_files")
  isFavorite      Boolean    @default(false) @map("is_favorite")
  tags            String[]   @default([])
  category        String?
  notes           String?
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  userId          String     @map("user_id")
  repositoryId    String     @map("repository_id")
  repository      Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model Transaction {
  id          String          @id @default(cuid())
  type        TransactionType
  credits     Int
  amount      Float?
  description String
  stripeId    String?         @map("stripe_id")
  createdAt   DateTime        @default(now()) @map("created_at")
  userId      String          @map("user_id")
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Meeting {
  id         String        @id @default(cuid())
  title      String
  transcript String?
  audioUrl   String?       @map("audio_url")
  summary    String?
  status     MeetingStatus @default(UPLOADED)
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")
  userId     String        @map("user_id")
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("meetings")
}

enum RepositoryStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum TransactionType {
  PURCHASE
  USAGE
}

enum MeetingStatus {
  UPLOADED
  PROCESSING
  COMPLETED
  FAILED
}
