generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  name                String
  avatarUrl           String?              @map("avatar_url")
  githubId            String               @unique @map("github_id")
  githubLogin         String?              @map("github_login")
  bio                 String?
  location            String?
  company             String?
  blog                String?
  twitterUsername     String?              @map("twitter_username")
  publicRepos         Int?                 @map("public_repos")
  publicGists         Int?                 @map("public_gists")
  followers           Int?
  following           Int?
  hireable            Boolean?
  githubCreatedAt     DateTime?            @map("github_created_at")
  credits             Int                  @default(150)
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  githubAccessToken   String?              @map("github_access_token")
  repositories        Repository[]
  transactions        Transaction[]
  // Relations for tracking who created items
  createdMeetings     Meeting[]            @relation("MeetingCreatedBy")
  createdQuestions    Question[]           @relation("QuestionCreatedBy")
  uploadedAttachments QuestionAttachment[] @relation("AttachmentUploadedBy")

  // New relations
  meetingFavorites    MeetingFavorite[]
  meetingComments     MeetingComment[]
  createdActionItems  MeetingActionItem[]
  assignedActionItems MeetingActionItem[]  @relation("ActionItemAssignee")
  sharedMeetings      MeetingShareSetting[] @relation("SharedMeetings")
  notifications       Notification[]       @relation("UserNotifications")

  @@map("users")
  Meeting Meeting[]
}

model Repository {
  id                  String               @id @default(cuid())
  name                String
  fullName            String               @map("full_name")
  owner               String
  url                 String
  description         String?
  language            String?
  stars               Int                  @default(0)
  forks               Int                  @default(0)
  isPrivate           Boolean              @default(false) @map("is_private")
  processed           Boolean              @default(false)
  summary             String?
  embeddingStatus     RepositoryStatus     @default(PENDING) @map("embedding_status")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  userId              String               @map("user_id")
  avatarUrl           String?              @map("avatar_url")
  fileCount           Int?                 @map("file_count")
  totalSize           Int?                 @map("total_size")
  watchersCount       Int?                 @map("watchers_count")
  commits             Commit[]
  questions           Question[]
  meetings            Meeting[]
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  files               RepositoryFile[]
  questionAttachments QuestionAttachment[]

  @@map("repositories")
}

model RepositoryFile {
  id           String     @id @default(cuid())
  path         String
  name         String
  type         String
  size         Int
  summary      String?
  language     String?
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  repositoryId String     @map("repository_id")
  fileKey      String?    @map("file_key")
  fileUrl      String?    @map("file_url")
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@unique([repositoryId, path])
  @@map("repository_files")
}

model Commit {
  id           String           @id @default(cuid())
  sha          String           @unique
  message      String
  authorName   String           @map("author_name")
  authorEmail  String           @map("author_email")
  authorAvatar String?          @map("author_avatar")
  timestamp    DateTime
  url          String
  summary      String?
  filesChanged Int              @map("files_changed")
  createdAt    DateTime         @default(now()) @map("created_at")
  repositoryId String           @map("repository_id")
  status       RepositoryStatus @default(PENDING)
  repository   Repository       @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("commits")
}

model Question {
  id                  String               @id @default(cuid())
  query               String
  answer              String
  confidenceScore     Float                @map("confidence_score")
  relevantFiles       Json                 @map("relevant_files")
  isFavorite          Boolean              @default(false) @map("is_favorite")
  tags                String[]             @default([])
  category            String?
  notes               String?
  attachments         Json                 @default("[]")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  userId              String               @map("user_id")
  repositoryId        String               @map("repository_id")
  repository          Repository           @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  createdBy           User                 @relation("QuestionCreatedBy", fields: [userId], references: [id], onDelete: Cascade)
  questionAttachments QuestionAttachment[]

  @@map("questions")
}

model QuestionAttachment {
  id               String     @id @default(cuid())
  fileName         String     @map("file_name")
  originalFileName String     @map("original_file_name")
  fileSize         Int        @map("file_size")
  fileType         String     @map("file_type")
  uploadUrl        String     @map("upload_url")
  backblazeFileId  String?    @map("backblaze_file_id")
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")
  uploadedBy       String     @map("uploaded_by")
  questionId       String?    @map("question_id")
  repositoryId     String     @map("repository_id")
  uploadedByUser   User       @relation("AttachmentUploadedBy", fields: [uploadedBy], references: [id], onDelete: Cascade)
  question         Question?  @relation(fields: [questionId], references: [id], onDelete: SetNull)
  repository       Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("question_attachments")
}

model Transaction {
  id          String          @id @default(cuid())
  type        TransactionType
  credits     Int
  amount      Float?
  description String
  stripeId    String?         @map("stripe_id")
  createdAt   DateTime        @default(now()) @map("created_at")
  userId      String          @map("user_id")
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Meeting {
  id               String        @id @default(uuid())
  title            String
  full_transcript  String?
  summary          String?
  user_edited_summary String?   // New field for user-edited summary
  status           MeetingStatus @default(UPLOADED)
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  source           String?
  language         String?
  raw_audio_path   String?
  num_segments     Int?
  meeting_length   Float?        // Duration in seconds
  participants String[] // Array of participant names or IDs
  meeting_segments MeetingSegment[]
  userId           String?       @map("user_id")
  user             User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // New relations
  favorites        MeetingFavorite[]
  comments         MeetingComment[]
  actionItems      MeetingActionItem[]
  shareSettings    MeetingShareSetting[]

  @@map("meetings")
  Repository Repository[]
  User User[] @relation("MeetingCreatedBy")
}

model MeetingSegment {
  id           String   @id @default(uuid())
  meeting_id   String
  meeting      Meeting  @relation(fields: [meeting_id], references: [id], onDelete: Cascade)
  segment_index Int
  title        String
  summary      String
  excerpt      String
  segment_text String
  start_time   Float
  end_time     Float
  embedding    String? // or Bytes? or reference to Qdrant
  created_at   DateTime @default(now())

  @@unique([meeting_id, segment_index], name: "meeting_id_segment_index")
  @@map("meeting_segments")
}

// New model for meeting favorites
model MeetingFavorite {
  id        String   @id @default(uuid())
  meetingId String   @map("meeting_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now())
  
  meeting   Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([meetingId, userId])
  @@map("meeting_favorites")
}

// New model for meeting comments
model MeetingComment {
  id        String   @id @default(uuid())
  meetingId String   @map("meeting_id")
  userId    String   @map("user_id")
  text      String
  timestamp Float    // Position in meeting (seconds)
  segmentId String?  @map("segment_id") // Optional reference to segment
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  meeting   Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("meeting_comments")
}

// New model for meeting action items
model MeetingActionItem {
  id          String            @id @default(uuid())
  meetingId   String            @map("meeting_id")
  userId      String            @map("user_id") // Creator
  assigneeId  String?           @map("assignee_id") // Optional assignee
  text        String
  completed   Boolean           @default(false)
  priority    ActionItemPriority @default(MEDIUM)
  dueDate     DateTime?         @map("due_date")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  meeting     Meeting           @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  creator     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignee    User?             @relation("ActionItemAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  
  @@map("meeting_action_items")
}

// New model for meeting share settings
model MeetingShareSetting {
  id          String            @id @default(uuid())
  meetingId   String            @map("meeting_id")
  userId      String            @map("user_id") // User being shared with
  permission  SharePermission   @default(VIEW)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  meeting     Meeting           @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user        User              @relation("SharedMeetings", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([meetingId, userId])
  @@map("meeting_share_settings")
}

// New model for notifications
model Notification {
  id          String              @id @default(uuid())
  userId      String              @map("user_id")
  type        NotificationType
  title       String
  message     String
  read        Boolean             @default(false)
  actionUrl   String?             @map("action_url")
  actionText  String?             @map("action_text")
  metadata    Json?               // Additional data as JSON
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  user        User                @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

enum RepositoryStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum TransactionType {
  PURCHASE
  USAGE
}

enum MeetingStatus {
  UPLOADED
  PROCESSING
  TRANSCRIBING
  SUMMARIZING
  COMPLETED
  FAILED
}

enum ActionItemPriority {
  LOW
  MEDIUM
  HIGH
}

enum SharePermission {
  VIEW
  EDIT
}

enum NotificationType {
  REPO_CREATED
  REPO_PROCESSED
  REPO_FAILED
  MEETING_UPLOADED
  MEETING_PROCESSED
  MEETING_FAILED
  CREDITS_LOW
  CREDITS_DEPLETED
  ACTION_ITEM_ASSIGNED
  ACTION_ITEM_COMPLETED
  COMMENT_ADDED
  MEETING_SHARED
}
