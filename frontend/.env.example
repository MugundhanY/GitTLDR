# Environment Configuration
NODE_ENV=development

# Processing Mode: "API" or "WORKER"
# API: Direct HTTP calls to python-worker (no Redis, faster for local dev)
# WORKER: Async processing via Redis queue (recommended for production)
PROCESSING_MODE=WORKER

# Database
DATABASE_URL="postgresql://username:password@localhost:5432/gittldr?schema=public"

PYTHON_WORKER_URL=http://localhost:8001

# Redis (for job queue)
REDIS_URL=redis://localhost:6379

# JWT
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# GitHub OAuth

GITHUB_CLIENT_ID=your-github-client-id
GITHUB_CLIENT_SECRET=your-github-client-secret
GITHUB_WEBHOOK_SECRET=your-github-webhook-secret

# Stripe
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key_here
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret_here


# App URLs
NEXT_PUBLIC_APP_URL=http://localhost:3000
NODE_WORKER_URL=http://localhost:3001

# Queue Configuration
QUEUE_NAME=gittldr_tasks

B2_APPLICATION_KEY_ID=your-b2-application-key-id
B2_APPLICATION_KEY=your-b2-application-key
B2_BUCKET_NAME=your-b2-bucket-name

NEXT_PUBLIC_WEBHOOK_SECRET=qRirwcNNj1tLjJDA



# Instructions:
# 1. Create a Stripe account at https://stripe.com
# 2. Get your API keys from the Stripe dashboard
# 3. Create products and prices in Stripe for each credit package
# 4. Set up a webhook endpoint pointing to: https://yourdomain.com/api/webhooks/stripe
# 5. Select these events in your webhook: checkout.session.completed, payment_intent.payment_failed
# 6. Copy the webhook signing secret to STRIPE_WEBHOOK_SECRET